{"version":3,"sources":["webpack://AbcTrace/./src/index.js"],"names":[],"mappings":";;;;;AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA","file":"bundle.js","sourcesContent":["// import abcTrace from './tool'\n\n// const canvas = document.getElementById('tool-canvas')\n\n// new abcTrace(canvas)\n\n// When true, moving the mouse draws on the canvas\nlet isDrawing = false;\nlet x = 0;\nlet y = 0;\nlet pixels = null;\nlet alphabetpixels = null;\nlet alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nlet letter = null;\n\nfunction toolSetup() {\n  drawletter();\n  pixels = context.getImageData(0, 0, myPics.width, myPics.height);\n  //   alphabetpixels = totalpixels(158, 101, 101);\n}\n\nfunction displayError() {\n  isDrawing = false;\n  alert(\"Oh Oh Try Again !\");\n  context.clearRect(0, 0, myPics.width, myPics.height);\n  drawletter(letter);\n}\n\nfunction getpixelcolor(x, y) {\n  let index = y * (pixels.width * 4) + x * 4;\n  return {\n    r: pixels.data[index],\n    g: pixels.data[index + 1],\n    b: pixels.data[index + 2],\n    a: pixels.data[index + 3],\n  };\n}\n\nfunction totalpixels(r, g, b) {\n  const pixelData = context.getImageData(0, 0, 640, 680);\n  const all = pixelData.data.length;\n  let amount = 0;\n  for (i = 0; i < all; i += 4) {\n    if (\n      pixelData.data[i] === r &&\n      pixelData.data[i + 1] === g &&\n      pixelData.data[i + 2] === b\n    ) {\n      amount++;\n    }\n  }\n  return amount;\n}\n\nfunction calcThreshold() {\n  if (totalpixels(173, 255, 47) / totalpixels(255, 250, 250) > 0.89) {\n    alert(\"Yay Good Job !!\");\n    context.clearRect(0, 0, myPics.width, myPics.height);\n    toolSetup();\n  }\n}\n\nconst myPics = document.getElementById(\"tool-canvas\");\nconst context = myPics.getContext(\"2d\");\n\n// event.offsetX, event.offsetY gives the (x,y) offset from the edge of the canvas.\n\n// Add the event listeners for mousedown, mousemove, and mouseup\nmyPics.addEventListener(\"mousedown\", (e) => {\n  x = e.offsetX;\n  y = e.offsetY;\n  isDrawing = true;\n});\n\nmyPics.addEventListener(\"touchstart\", (e) => {\n  x = e.offsetX;\n  y = e.offsetY;\n  isDrawing = true;\n});\n\nmyPics.addEventListener(\"mousemove\", (e) => {\n  if (isDrawing === true) {\n    drawLine(context, x, y, e.offsetX, e.offsetY);\n    x = e.offsetX;\n    y = e.offsetY;\n  }\n});\n\nmyPics.addEventListener(\"touchmove\", (e) => {\n  if (isDrawing === true) {\n    drawLine(context, x, y, e.offsetX, e.offsetY);\n    x = e.offsetX;\n    y = e.offsetY;\n  }\n});\n\nwindow.addEventListener(\"mouseup\", (e) => {\n  if (isDrawing === true) {\n    drawLine(context, x, y, e.offsetX, e.offsetY);\n    x = 0;\n    y = 0;\n    isDrawing = false;\n    calcThreshold();\n  }\n});\n\nwindow.addEventListener(\"touchend\", (e) => {\n  if (isDrawing === true) {\n    drawLine(context, x, y, e.offsetX, e.offsetY);\n    x = 0;\n    y = 0;\n    isDrawing = false;\n    calcThreshold();\n  }\n});\n\nfunction drawLine(context, x1, y1, x2, y2) {\n  let color = getpixelcolor(x2, y2);\n  if (color.a === 0) {\n    displayError();\n  } else {\n    context.beginPath();\n    context.strokeStyle = \"rgb(173,255,47)\";\n    context.lineWidth = 25;\n    context.lineCap = \"round\";\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n    context.closePath();\n  }\n}\n\nfunction drawletter(empty) {\n  let chars = alphabets.split(\"\");\n  letter = empty || chars[parseInt(Math.random() * chars.length, 10)];\n  context.font = \"430px Arial\";\n  context.fillStyle = \"rgb(255,250,250)\";\n  context.textBaseline = \"middle\";\n  const centerx = (myPics.width - context.measureText(letter).width) / 2;\n  const centery = myPics.height / 2;\n\n  context.fillText(letter, centerx, centery);\n}\n\ntoolSetup();\n\nconsole.log(totalpixels(255, 255, 0));\nconsole.log(totalpixels(165, 42, 42));\nconsole.log(totalpixels(158, 101, 101));\n"],"sourceRoot":""}